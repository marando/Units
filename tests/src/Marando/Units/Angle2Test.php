<?php

namespace Marando\Units;

use \Marando\Units\Angle2;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-16 at 01:50:47.
 */
class Angle2Test extends \PHPUnit_Framework_TestCase
{

    private $tests;

    function setUp()
    {
        parent::setUp();

        $this->tests = [
          [270.2625, 270, 15, 45],
          [-180.0000008333, -180, 0, -0.003],
          [12.5822565, 12, -34, 56.1234],
          [43.119000, 43, 7, 8.4],
          [rad2deg(4.7169704697), 270, 15, 45],
          [rad2deg(0.2196018033), 12, -34, 56.1234],
          [rad2deg(0.7525685202), 43, 7, 8.4],
          [180.0685277778, 180, 4, 6.7],
          [-7.7908333333, -7, 47, 27],
          [-15.1791666667, -15, 10, 45],
          [15.1791666667, 15, 10, 45],
          [0.2, 0, 12, 0],
        ];
    }

    public function testDeg()
    {
        foreach ($this->tests as $test) {
            $angle = Angle2::deg($test[0]);

            $this->assertEquals(abs($test[1]), $angle->d, 'd');
            $this->assertEquals(abs($test[2]), $angle->m, 'm');
            $this->assertEquals(abs($test[3]), $angle->s, 's', 1e-5);
        }
    }

    public function testRad()
    {
        foreach ($this->tests as $test) {
            $angle = Angle2::rad(deg2rad($test[0]));

            $this->assertEquals(abs($test[1]), $angle->d, 'd');
            $this->assertEquals(abs($test[2]), $angle->m, 'm');
            $this->assertEquals(abs($test[3]), $angle->s, 's', 1e-2);
        }
    }

    public function testDMS()
    {
        foreach ($this->tests as $test) {
            $angle = Angle2::dms($test[1], $test[2], $test[3]);

            $this->assertEquals(abs($test[1]), $angle->d);
            $this->assertEquals(abs($test[2]), $angle->m);
            $this->assertEquals(abs($test[3]), $angle->s);
        }
    }

    public function testToRad()
    {
        /** @var Angle2[] $test */
        foreach ($this->tests as $test) {
            $angle = Angle2::dms($test[1], $test[2], $test[3]);
            $this->assertEquals(deg2rad($test[0]), $angle->rad);
        }
    }

    public function testToDeg()
    {
        /** @var Angle2[] $test */
        foreach ($this->tests as $test) {
            $angle = Angle2::dms($test[1], $test[2], $test[3]);
            $this->assertEquals($test[0], $angle->deg, 'deg', 1e-8);
        }
    }


}
