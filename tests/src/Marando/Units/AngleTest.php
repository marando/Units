<?php

namespace Marando\Units;

use \Marando\Units\Angle;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-16 at 01:50:47.
 */
class AngleTest extends \PHPUnit_Framework_TestCase {

  /**
   * @covers Marando\Units\Angle::fromDeg
   */
  public function testFromDeg() {
    $this->assertEquals(180, Angle::deg(180)->deg);
  }

  /**
   * @covers Marando\Units\Angle::fromRad
   */
  public function testFromRad() {
    $this->assertEquals(2, Angle::rad(2)->rad);
  }

  /**
   * @covers Marando\Units\Angle::fromDMS
   */
  public function testFromDMS() {
    $tests = [
        [180, 4, 6.7, 180.0685277778],
        [-7, 47, 27, -7.7908333333],
        [-15, 10, 45, -15.1791666667],
        [15, 10, 45, 15.1791666667],
    ];

    foreach ($tests as $t)
      $this->assertEquals($t[3], Angle::dms($t[0], $t[1], $t[2])->deg);
  }

  /**
   * @covers Marando\Units\Angle::time
   */
  public function testTime() {
    $tests = [
        [21600, 90, time::SEC_IN_DAY],
        [2700, 270, time::SEC_IN_HOUR],
    ];

    foreach ($tests as $t) {
      $time = Time::sec($t[0]);
      $this->assertEquals($t[1], Angle::time($time, $t[2])->deg);

      // Test backwards compatibility
      $this->assertEquals($t[1], Angle::fromTime($time, $t[2])->deg);
    }
  }

  /**
   * @covers Marando\Units\Angle::Pi
   */
  public function testPi() {
    $this->assertEquals(pi(), Angle::Pi()->rad);
  }

  /**
   * @covers Marando\Units\Angle::norm
   */
  public function testNorm() {
    $tests = [
        [480, 120, 0, 360],
        [500, 140, 0, 180],
            //[480, -240, -360, 0],
    ];

    foreach ($tests as $t)
      $this->assertEquals($t[1], Angle::deg($t[0])->norm($t[2], $t[3])->deg);
  }

  /**
   * @covers Marando\Units\Angle::add
   */
  public function testAdd() {
    $tests = [
        [180, 40, 220],
        [180, -40, 140],
        [-10, 600, 590],
    ];

    foreach ($tests as $t)
      $this->assertEquals($t[2], Angle::deg($t[0])->add(Angle::deg($t[1]))->deg);
  }

  /**
   * @covers Marando\Units\Angle::multiply
   */
  public function testMultiply() {
    $tests = [
        [180, 2, 360],
        [180, -3, -540],
        [-10, 6, -60],
    ];

    foreach ($tests as $t)
      $this->assertEquals($t[2],
              Angle::deg($t[0])->multiply(Angle::deg($t[1]))->deg);
  }

  /**
   * @covers Marando\Units\Angle::subtract
   */
  public function testSubtract() {
    $tests = [
        [180, 40, 140],
        [180, -40, 220],
        [-10, 600, -610],
    ];

    foreach ($tests as $t)
      $this->assertEquals($t[2],
              Angle::deg($t[0])->subtract(Angle::deg($t[1]))->deg);
  }

  /**
   * @covers Marando\Units\Angle::negate
   */
  public function testNegate() {
    $this->assertEquals(-15, Angle::deg(15)->negate()->deg);
  }

  /**
   * @covers Marando\Units\Angle::atan2
   */
  public function testAtan2() {
    $this->assertEquals(atan2(40, 14), Angle::atan2(40, 14)->rad);
  }

  /**
   * @covers Marando\Units\Angle::calcMAS
   */
  public function testMAS() {
    $tests = [
        // deg, mas
        [0.00014064555555555556, 506.324],
        [0.00002432, 87.552],
        [0.00007564, 272.30400000000003],
    ];

    foreach ($tests as $t) {
      $mas = $t[1];
      $deg = $t[0];

      $this->assertEquals($mas, Angle::deg($deg)->mas, "deg -> mas {$deg}");
      $this->assertEquals($deg, Angle::mas($mas)->deg, "mas -> deg {$mas}");
    }
  }

  /**
   * @covers Marando\Units\Angle::arcsec
   */
  public function testArcsec() {
    $tests = [
        // deg, arcsec
        [50, 180000],
        [0.12, 432]
    ];

    foreach ($tests as $t) {
      $asec = $t[1];
      $deg  = $t[0];

      $this->assertEquals($asec, Angle::deg($deg)->arcsec, "deg -> asec {$deg}");
      $this->assertEquals($deg, Angle::arcsec($asec)->deg, "asec -> deg {$asec}");
    }
  }

  /**
   * @covers Marando\Units\Angle::arcmin
   */
  public function testArcmin() {
    $tests = [
        // deg, arcmin
        [50, 3000],
        [7.2, 432]
    ];

    foreach ($tests as $t) {
      $amin = $t[1];
      $deg  = $t[0];

      $this->assertEquals($amin, Angle::deg($deg)->arcmin, "deg -> amin {$deg}");
      $this->assertEquals($deg, Angle::arcmin($amin)->deg, "amin -> deg {$amin}");
    }
  }

}
