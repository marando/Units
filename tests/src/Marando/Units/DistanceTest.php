<?php

namespace Marando\Units;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-16 at 16:21:07.
 */
class DistanceTest extends \PHPUnit_Framework_TestCase {
  //----------------------------------------------------------------------------
  // Unit Tests
  //----------------------------------------------------------------------------

  /**
   * @covers Marando\Units\Distance::mm
   */
  public function test_mm() {
    $dist = Distance::mm(224396806050000);

    $this->assertEquals(224396806050000, $dist->mm, 'mm');
    $this->assertEquals(22439680605000, $dist->cm, 'cm');
    $this->assertEquals(224396806050, $dist->m, 'm');
    $this->assertEquals(224396806.050, $dist->km, 'km');
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi');
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::cm
   */
  public function test_cm() {
    $dist = Distance::cm(22439680605000);

    $this->assertEquals(224396806050000, $dist->mm, 'mm');
    $this->assertEquals(22439680605000, $dist->cm, 'cm');
    $this->assertEquals(224396806050, $dist->m, 'm');
    $this->assertEquals(224396806.050, $dist->km, 'km');
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi');
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::m
   */
  public function test_m() {
    $dist = Distance::m(224396806050);

    $this->assertEquals(224396806050000, $dist->mm, 'mm');
    $this->assertEquals(22439680605000, $dist->cm, 'cm');
    $this->assertEquals(224396806050, $dist->m, 'm');
    $this->assertEquals(224396806.050, $dist->km, 'km');
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi');
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::km
   */
  public function test_km() {
    $dist = Distance::km(224396806.050);

    $this->assertEquals(224396806050000, $dist->mm, 'mm');
    $this->assertEquals(22439680605000, $dist->cm, 'cm');
    $this->assertEquals(224396806050, $dist->m, 'm');
    $this->assertEquals(224396806.050, $dist->km, 'km');
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi');
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::mi
   */
  public function test_mi() {
    $dist = Distance::mi(139433710.9095383);

    $this->assertEquals(224396806050000, $dist->mm, 'mm');
    $this->assertEquals(22439680605000, $dist->cm, 'cm');
    $this->assertEquals(224396806050, $dist->m, 'm');
    $this->assertEquals(224396806.050, $dist->km, 'km');
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi');
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::au
   */
  public function testAU() {
    $dist = Distance::au(1.5);

    $this->assertEquals(224396806050000, $dist->mm, 'mm');
    $this->assertEquals(22439680605000, $dist->cm, 'cm');
    $this->assertEquals(224396806050, $dist->m, 'm');
    $this->assertEquals(224396806.050, $dist->km, 'km');
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi');
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::pc
   */
  public function test_pc() {
    $dist = Distance::pc(7.2722052154443E-6);

    $this->assertEquals(224396806050000, $dist->mm, 'mm', 1e5);
    $this->assertEquals(22439680605000, $dist->cm, 'cm', 1e4);
    $this->assertEquals(224396806050, $dist->m, 'm', 1e2);
    $this->assertEquals(224396806.050, $dist->km, 'km', 1e-1);
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi', 1e-1);
    $this->assertEquals(1.5, $dist->au, 'au', 1e-9);
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.27221e-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::ly
   */
  public function test_ly() {
    $dist = Distance::ly(0.000023718761113304037);

    $this->assertEquals(224396806050000, $dist->mm, 'mm', 1e5);
    $this->assertEquals(22439680605000, $dist->cm, 'cm', 1e4);
    $this->assertEquals(224396806050, $dist->m, 'm', 1e2);
    $this->assertEquals(224396806.050, $dist->km, 'km', 1e-1);
    $this->assertEquals(139433710.9095383, $dist->mi, 'mi', 1e-1);
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

  /**
   * @covers Marando\Units\Distance::parallax
   */
  public function testParallax() {
    $π = Angle::mas(768.7);
    $d = Distance::parallax($π);

    $this->assertEquals(1.3009, $d->pc, 'pc', 1e-4);
    $this->assertEquals(4.243, $d->ly, 'ly', 1e-3);
    $this->assertEquals(0.7687, $d->toParallax()->deg * 3600, 'π', 1e-4);
  }

  //----------------------------------------------------------------------------
  // Functional Tests
  //----------------------------------------------------------------------------

  /**
   * The purpose of this test is to see if overriding the definition of the
   * astronomical unit provides the correct conversion results
   */
  public function testOverrideAU() {
    // Define distance using old AU (prior to the IAU 2012 resolution)
    $oldAU = 149597870691.000015;
    $dist  = Distance::au(1.5, Distance::m($oldAU));

    // Define ration between two definitions
    $ratio = Distance::m_in_AU / $oldAU;

    $this->assertEquals(224396806050000 / $ratio, $dist->mm, 'mm', 1e-1);
    $this->assertEquals(22439680605000 / $ratio, $dist->cm, 'cm');
    $this->assertEquals(224396806050 / $ratio, $dist->m, 'm', 1e-4);
    $this->assertEquals(224396806.050 / $ratio, $dist->km, 'km', 1e-7);
    $this->assertEquals(139433710.9095383 / $ratio, $dist->mi, 'mi', 1e-6);
    $this->assertEquals(1.5, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037 / $ratio, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6 / $ratio, $dist->pc, 'pc');
  }

  /**
   * The purpose of this test is to see if overriding the definition of the
   * light year (by overriding c and days/year) provides the correct conversion
   * results
   */
  public function testOverrideLightYear() {
    // Use speed of light constant from 1972 and Besselian year
    $old_c = Velocity::ms(299792456.2);
    $bYear = 365.242198781;
    $dist  = Distance::ly(0.000023718761113304037, $old_c, $bYear);

    // Define ration between two definitions
    $ratio = (Velocity::c_ms * 365.25) / ($old_c->ms * $bYear);

    $this->assertEquals(224396806050000 / $ratio, $dist->mm, 'mm', 1e5);
    $this->assertEquals(22439680605000 / $ratio, $dist->cm, 'cm', 1e4);
    $this->assertEquals(224396806050 / $ratio, $dist->m, 'm', 1e2);
    $this->assertEquals(224396806.050 / $ratio, $dist->km, 'km', 1e-1);
    $this->assertEquals(139433710.9095383 / $ratio, $dist->mi, 'mi', 1e-1);
    $this->assertEquals(1.5 / $ratio, $dist->au, 'au');
    $this->assertEquals(0.000023718761113304037, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6 / $ratio, $dist->pc, 'pc');
  }

  public function testOverrideParsec() {
    // Define distance using old AU (prior to the IAU 2012 resolution)
    $oldAU = 149597870691.000015;
    $dist  = Distance::pc(7.2722052154443E-6, Distance::m($oldAU));

    // Define ration between two definitions
    $ratio = Distance::m_in_AU / $oldAU;

    $this->assertEquals(224396806050000 / $ratio, $dist->mm, 'mm', 1e6);
    $this->assertEquals(22439680605000 / $ratio, $dist->cm, 'cm', 1e4);
    $this->assertEquals(224396806050 / $ratio, $dist->m, 'm', 1e2);
    $this->assertEquals(224396806.050 / $ratio, $dist->km, 'km', 1e-1);
    $this->assertEquals(139433710.9095383 / $ratio, $dist->mi, 'mi', 1e-1);
    $this->assertEquals(1.5 / $ratio, $dist->au, 'au', 1e-9);
    $this->assertEquals(0.000023718761113304037 / $ratio, $dist->ly, 'ly');
    $this->assertEquals(7.2722052154443E-6, $dist->pc, 'pc');
  }

}
